import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import gompertz

# Data for fitting (excluding index 1)
swim_times = np.array([46.8, 46.86, 46.88, 46.91, 46.92, 46.94, 46.96, 46.97, 46.97, 
                       46.98, 47.02, 47.04, 47.05, 47.06, 47.07, 47.08, 47.08, 47.08, 
                       47.09, 47.1, 47.11, 47.12, 47.13, 47.17, 47.2, 47.2, 47.21, 
                       47.23, 47.24, 47.25, 47.26, 47.26, 47.27, 47.27, 47.3, 47.31, 
                       47.32, 47.32, 47.33, 47.35, 47.35, 47.36, 47.37, 47.37, 47.37, 
                       47.39, 47.39, 47.39, 47.43])

# Fit the Gompertz distribution using scipy's gompertz.fit function
shape, loc, scale = gompertz.fit(swim_times, floc=0)

# Swim time at index 1
swim_time_index_1 = 46.4

# Generate a range of swim times for plotting the fitted Gompertz distribution
x_values = np.linspace(min(swim_times), max(swim_times), 100)
y_values = gompertz.pdf(x_values, shape, loc=loc, scale=scale)


# Step 1: Asymptote for the Gompertz distribution
asymptote = loc + scale  # This is where the probability mass "levels off"

# Step 2: Calculate the probability of observing a swim time <= 46.4
probability = gompertz.cdf(swim_time_index_1, shape, loc=loc, scale=scale)

# Print the results
print(f"Asymptote (limiting value): {asymptote:.6f}")
print(f"Probability of swim time <= {swim_time_index_1}: {probability:.6f}")
print(shape, loc, scale)

# Create the plot
plt.figure(figsize=(10, 6))

# Plot the fitted Gompertz distribution
plt.plot(x_values, y_values, label="Fitted Gompertz Distribution", color="blue")

# Plot the actual swim times (excluding index 1)
plt.scatter(swim_times, gompertz.pdf(swim_times, shape, loc=loc, scale=scale), color="red", label="Swim Times")

# Highlight the swim time at index 1
plt.axvline(x=swim_time_index_1, color='green', linestyle='--', label=f"Swim Time (Index 1): {swim_time_index_1}")

# Adding labels and legend
plt.title("Fitted Gompertz Distribution and Swim Times")
plt.xlabel("Swim Time (seconds)")
plt.ylabel("Probability Density")
plt.legend()

# Show the plot
plt.grid(True)
plt.show()
